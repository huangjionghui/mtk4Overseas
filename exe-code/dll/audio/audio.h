
#pragma once

#include "FlyGlobal.h"

//前后左右平衡的表 |-20~20|  取21格
#define FR_LR_BALANCE_MAX  21

const BYTE FR_LR_BALANCE_TABLE[FR_LR_BALANCE_MAX]={
	0, /*1, 2, 3,*/ 
	2,
	4, /*5, 6, 7,*/  
	6,
	8, /*9,10,11,*/
	10,
	12,/*13,14,15,*/
	14,
	16,/*17,18,19,*/
	18,
	20,/*21,22,23,*/
	22,
	24,/*25,26,27,*/
	26,
	28,/*29,30,31,*/
	30,
	32,/*33,34,35,*/
	34,
	36,/*37,38,39,*/
	38,
	40
};

//高低音表  |-14~14|  取11格
#define TREBLE_MID_BASS_LEVEL_MAX 11
const BYTE TREBLE_MID_BASS_TABLE[TREBLE_MID_BASS_LEVEL_MAX]={
	0,/*1,2,3,*/
	4,/*5,6,7,*/
	8,/*9,,11,*/
	10,
	12,/*13*/
	14,/*15*/
	16,
	18,/*19,20,21,*/
	22,/*23,24,25,*/
	26,/*27*/
	28
};

//响度    |0~20|  取11格
#define LOUDNESS_LEVEL_MAX 11
const BYTE LOUDNESS_TABLE[LOUDNESS_LEVEL_MAX]={
	0,1,2,3,
	4,5,6,7,
	8,9,12//一样
};

//音量 0-100,取60格
#define VOLUME_LEVEL_MAX 61

const UINT32 VOLUME_TABLE[VOLUME_LEVEL_MAX+8]={
	0x00000,
	0x000af, 0x000c5, 0x000db, 0x000f1, 0x00107, 0x0012f, 0x00155, 0x00181, 0x001bd, 0x001e9,
	0x00228, 0x00261, 0x002ad, 0x002ea, 0x0034c, 0x003a4, 0x00412, 0x004ac, 0x00530, 0x005f6,
	0x006a6, 0x0076c, 0x0081c, 0x00924, 0x00a0a, 0x00b76, 0x00cc0, 0x00e86, 0x0107a, 0x01336,//30-2.1V

	0x0158e, 0x01782, 0x019da, 0x01cfa, 0x021aa, 0x024ca, 0x028b2, 0x02e2a, 0x032da, 0x03826,
	0x03d72, 0x0440a, 0x04bda, 0x056ca, 0x06282, 0x06b1a, 0x06caa, 0x06e3a, 0x06fca, 0x0785a,
	0x07fbf, 0x099a6, 0x0a0ac, 0x0a7b2, 0x0aeb8, 0x0b5be, 0x0bcc4, 0x0c3ca, 0x13ccc, 0x163d4,
	0x17758, 0x18adc, 0x19e60, 0x1b1e4, 0x1c568, 0x1FFE0, 0x1FFF4, 0x20000
};

//BT音量 0-255,取60格
const UINT32 BT_VOLUME_TABLE[VOLUME_LEVEL_MAX]={
	0x0, 
	0x4,  0x8,  0xc,  0x10, 0x14, 0x18, 0x1c, 0x20, 0x24, 0x28, 
	0x2c, 0x30, 0x34, 0x38, 0x3c, 0x40, 0x44, 0x48, 0x4c, 0x50, 
	0x54, 0x58, 0x5c, 0x60, 0x64, 0x68, 0x6c, 0x70, 0x74, 0x78, 

	0x7c, 0x80, 0x84, 0x88, 0x8c, 0x90, 0x94, 0x98, 0x9c, 0xa0, 
	0xa4, 0xa8, 0xac, 0xb0, 0xb4, 0xb8, 0xbc, 0xc0, 0xc4, 0xc8, 
	0xcc, 0xd0, 0xd4, 0xd8, 0xdc, 0xe0, 0xe4, 0xe8, 0xec, 0xff
};

//BT来电音量 0-0XFFFF,取60格
const UINT32 BTRING_VOLUME_TABLE[VOLUME_LEVEL_MAX]={
	0x0000,
	0x5b0,  0xb60,  0x1110, 0x16c0, 0x1c70, 0x2220, 0x27d0, 0x2d80, 0x3330, 0x38e0, 
	0x3e90, 0x4440, 0x49f0, 0x4fa0, 0x5550, 0x5b00, 0x60b0, 0x6660, 0x6c10, 0x71c0, 
	0x7770, 0x7d20, 0x82d0, 0x8880, 0x8e30, 0x93e0, 0x9990, 0x9f40, 0xa4f0, 0xaaa0,

	0xad78, 0xb050, 0xb328, 0xb600, 0xb8d8, 0xbbb0, 0xbe88, 0xc160, 0xc438, 0xc710, 
	0xc9e8, 0xccc0, 0xcf98, 0xd270, 0xd548, 0xd820, 0xdaf8, 0xddd0, 0xe0a8, 0xe380, 
	0xe658, 0xe930, 0xec08, 0xeee0, 0xf1b8, 0xf490, 0xf768, 0xfa40, 0xfd18, 0xffff
};


//GPS音量 0-0xFFFF,取60+3格
const UINT32 GPS_VOLUME_TABLE[VOLUME_LEVEL_MAX*2]={

	0x00000, 
	0x00222, 0x00444, 0x00666, 0x00888, 0x00aaa, 0x00ccc, 0x00eee, 0x01110, 0x01332, 0x01554, 
	0x01776, 0x01998, 0x01bba, 0x01ddc, 0x01ffe, 0x02220, 0x02442, 0x02664, 0x02886, 0x02aa8, 
	0x02cca, 0x02eec, 0x0310e, 0x03330, 0x03552, 0x03774, 0x03996, 0x03bb8, 0x03dda, 0x03ffc, 
	0x0421e, 0x04440, 0x04662, 0x04884, 0x04aa6, 0x04cc8, 0x04eea, 0x0510c, 0x0532e, 0x05550, 
	0x05772, 0x05994, 0x05bb6, 0x05dd8, 0x05ffa, 0x0621c, 0x0643e, 0x06660, 0x06882, 0x06aa4, 
	0x06cc6, 0x06ee8, 0x0710a, 0x0732c, 0x0754e, 0x07770, 0x07992, 0x07bb4, 0x07dd6, 0x07ff8,

	0x0821a, 0x0843c, 0x0865e, 0x08880, 0x08aa2, 0x08cc4, 0x08ee6, 0x09108, 0x0932a, 0x0954c, 
	0x0976e, 0x09990, 0x09bb2, 0x09dd4, 0x09ff6, 0x0a218, 0x0a43a, 0x0a65c, 0x0a87e, 0x0aaa0, 
	0x0acc2, 0x0aee4, 0x0b106, 0x0b328, 0x0b54a, 0x0b76c, 0x0b98e, 0x0bbb0, 0x0bdd2, 0x0bff4, 
	0x0c216, 0x0c438, 0x0c65a, 0x0c87c, 0x0ca9e, 0x0ccc0, 0x0cee2, 0x0d104, 0x0d326, 0x0d548, 
	0x0d76a, 0x0d98c, 0x0dbae, 0x0ddd0, 0x0dff2, 0x0e214, 0x0e436, 0x0e658, 0x0e87a, 0x0ea9c, 
	0x0ecbe, 0x0eee0, 0x0f102, 0x0f324, 0x0f546, 0x0f768, 0x0f98a, 0x0fbac, 0x0fdce, 0x0fff0, 
};

//MP3音量 0-0xFFFF,取60格
const UINT32 MP3_VOLUME_TABLE[VOLUME_LEVEL_MAX]={
	0,  
	 1, 2, 3, 5, 6, 7, 8, 9,10,12,
	15,18,22,23,25,27,29,30,32,33,
	35,37,39,40,42,43,45,47,49,50,

	52,53,55,57,59,60,62,63,65,67,
	69,70,72,73,75,77,79,80,82,83,
	85,87,89,90,92,93,95,97,99,100
};

//DVP音量 0-0x20000,取60格
const UINT32 DVP_VOLUME_TABLE[VOLUME_LEVEL_MAX]={
	0, 
	 1, 2, 3, 4, 5, 6, 7,10,15,17,
	19,20,22,23,25,27,29,30,32,33,
	35,37,39,40,42,43,45,47,49,50,
	
	52,53,55,57,59,60,62,63,65,67,
	69,70,72,73,75,77,79,80,82,83,
	85,87,89,90,92,93,95,97,99,100
};
//EQ 28,取13格
#define EQ_VALUES_LEVEL_MAX 13
const UINT32 EQ_VALUES_TABLE[EQ_VALUES_LEVEL_MAX]={0, 2, 4, 6, 8, 12,14,16,18,22,24,26,28};

struct audio_t{

	//初始化,上电相关
	BOOL  bInit;		//初始化
	BOOL  bPowerOn;		//上电
	BOOL  bPowerUp;		//挂起
	BOOL  bPowerResume;	//唤醒

	UINT16 iCurAudioChannel;
	UINT16 iCurAudioParma;
	UINT16 iCurAudioVolume;
	UINT16 iCurGPSVolume;
	BOOL   bSubAudioStatus;

	//函数API接口,一定要放最后
	FlyGlobal_T sApiTable;
};

// 下列 ifdef 块是创建使从 DLL 导出更简单的
// 宏的标准方法。此 DLL 中的所有文件都是用命令行上定义的 AUDIO_EXPORTS
// 符号编译的。在使用此 DLL 的
// 任何其他项目上不应定义此符号。这样,源文件中包含此文件的任何其他项目都会将
// AUDIO_API 函数视为是从 DLL 导入的,而此 DLL 则将用此宏定义的
// 符号视为是被导出的。
#ifdef AUDIO_EXPORTS
#define AUDIO_API __declspec(dllexport)
#else
#define AUDIO_API __declspec(dllimport)
#endif

//导出函数表
extern "C"
{
	AUDIO_API FlyGlobal_T*GetDllProcAddr(void);
};